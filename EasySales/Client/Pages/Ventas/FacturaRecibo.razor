@page "/ventas/facturarecibo/{Id}"

@using EasySales.Shared;
@using System.Text.Json;

@inject IJSRuntime Js

<style type="text/css" media="print">

    @@media print {
        body {
            margin-top: 100px;
            font-size: 12pt;
            width: 100%;
            color: black;
            text-align: center;
        }

        .texto {
            font-size: 10pt;
            text-align: center;
        }

        .noprint {
            visibility: hidden;
        }
        /*.filas {
            border-bottom: solid 10px gray;
        }*/
    }
</style>


@if (factura != null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 text-center"><h4 class="texto">Nombre Empresa!</h4></div>
            <div class="col-12 text-center">@DateTime.Now</div>
            <div class="col-12 text-center">Dirección empresa.</div>
            <div class="col-12 text-center">Managua, Nicaragua.</div>
            <div class="col-12 text-center">Teléfonos: 88556633 / 22556699</div>
        </div>
    </div>
    <div class="form-group row">
        <h4 class="noprint">Detalle Factura</h4>
        <label>Numero Factura: @factura.Id</label>
        <label>Fecha: @factura.Fecha.ToShortDateString()</label>
        <label>Cliente: @cliente.Nombre</label>
    </div>
   

    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>precio</th>
                <th>Cantidad</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in facturaDetalle)
            {
                <tr>
                    <td class="col-lg-4 col-md-4 col-sm-12 texto">@product.Producto.Nombre</td>
                    <td class="col-lg-4 col-md-4 col-sm-12">@product.Cantidad</td>
                    <td class="col-lg-4 col-md-4 col-sm-12">@product.Subtotal</td>
                </tr>
            }
        </tbody>
    </table>
     <div class="row">
    <Label class="col-12 text-end fw-bold">Subtotal $: @factura.Subtotal</Label>
    <Label class="col-12 text-end fw-bold">Impuesto$: @factura.Impuestos</Label>
    <Label class="col-12 text-end fw-bold">Total $: @factura.Total</Label>
    </div>
    <br/>
    <button @onclick="Print" class="btn btn-info form-control noprint text-white">Imprimir Factura</button>

}


<PageTitle>Recibo</PageTitle>

<SfSpinner Label="Cargando Datos, Por Favor Espere." Size="50" Type="SpinnerType.Bootstrap5"
@bind-Visible="SpinnerVisible"></SfSpinner>



@code {

    #region Variables

    [Parameter]
    public string Id { get; set; } 

    [Inject]
    public IVentasService? ventasService { get; set; }

    [Inject]
    public IClientesServices? clientesServices { get; set; }

    [Inject]
    public IEncryptionService? encryptionService { get; set; }



    private List<FacturaDetalle> facturaDetalle { get; set; }
    private Facturas factura { get; set; }
    private Clientes cliente { get; set; }

    public bool SpinnerVisible { get; set; } = false;
    private string DecryptedParameter { get; set; }


    #endregion

    protected override async Task OnInitializedAsync()
    {
        try
        {

            Thread.CurrentThread.CurrentCulture = new CultureInfo("us-US");
            this.SpinnerVisible = true;
            DecryptedParameter = await encryptionService.Decrypt(this.Id);
            this.factura = await ventasService.ObtenerXId(Convert.ToInt64(DecryptedParameter));
            this.facturaDetalle = (await ventasService.ObtenerFacturaDetalleXId(factura.Id)).ToList();
            this.cliente = await clientesServices.ObtenerXId(factura.ClienteId);
            this.SpinnerVisible = false;
        }
        catch (Exception)
        {

            throw;
        }

    }

    #region

    private async Task Print()
    {
        await Js.InvokeVoidAsync("printInvoke");
    }

    #endregion
}
